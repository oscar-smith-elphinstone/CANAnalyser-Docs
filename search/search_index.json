{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Elphinstone Cloud Connect is an internal tool for taking advantage of vehicle data. It is capable of pooling data from multiple sources and of different data-types. The main use case for this software is to analyse historical canbus data to make informed decisions.</p>"},{"location":"#interface","title":"Interface","text":"<p>In its current form cloud connect is a glorified text editor. It comnbines all the operations needed to interact with the command line tool into an easy to use package. It provides assisted text editing, file upload and live progress monitoring.</p>"},{"location":"#input-editor","title":"Input Editor","text":"<p>The input file, which can be created in the input editor is your connection to the data. It defines the actions/steps that you want to perform on the data to acheive the desired results. Within the gui these input files can be opened edited and saved with linting and syntax highligting.</p>"},{"location":"#config-editor","title":"Config Editor","text":"<p>The configuration files let you define datasources, these can be from cloud servers such as S3 and Azure or from your local drive. The configuration files also let you set parameters such as local timezone and the timezone of different server connections</p>"},{"location":"#dbc-folder","title":"DBC Folder","text":"<p>To retrieve data efficiently cloud connect needs access to information about the CAN protocols you are using. These can be supplied in a folder with the .dbc files you use and then linked using the user interface.</p>"},{"location":"#output","title":"Output","text":"<p>As the program runs the output terminal will be updated to reflect progress and identify errors which could cause the program to stop. The output of the terminal can be saved at anypoint to a timestamped file. In the case that you are unable to resolve an issue yourself this output file can be used by someone else to idenitfy the issue in your input and config files. </p>"},{"location":"#steps","title":"Steps","text":"<p>Steps are the backbone of Cloud Control, they provide the functionality for simple queries, complex procedures and everything inbetween. Each line you write in the input file is considered a step, these can be chained together in any order to produce desired results.</p> <p>From the navigation bar you can learn the syntax and how to use each of these steps.</p>"},{"location":"#general-syntax","title":"General syntax","text":"<p>Each step will always have these two features, a TYPE and a (Name), what follows after is specific to each step type</p> <pre><code>TYPE (Name) ...\n</code></pre>"},{"location":"#types","title":"Types","text":"<p>Load Loading from data source</p> <p>Operate Operate on data</p> <p>Combine Combine single column data</p> <p>Table Create multicolumn data</p> <p>Export Export data to excel</p> <p>Plot Plot data visualisations</p> <p>Snapshot Quickly check data</p>"},{"location":"combine/","title":"Combine","text":"<p>The combine step is used to combine two datasets by matching timeseries data point between them. The combine function is able to match over a custom time interval ensuring data that is not synced can still be combined together accurately.</p> <p>Single column data sets can be added, subtracted, divided or multiplied by each other. This if you want to perform a calculation which involves two or more signals. Keep in mind that the combine function can be chained like the other steps. This means you can combine as many tables as you need into a single column table.</p> <p>There are 5 combine types currently available throught the combine step with more options set to come soon.</p>"},{"location":"combine/#multiply","title":"Multiply","text":"<pre><code>COMBINE (Name) Data_1 Data_2 MULTIPLY(time_interval)\n</code></pre>"},{"location":"combine/#divide","title":"Divide","text":"<pre><code>COMBINE (Name) Data_1 Data_2 DIVIDE(time_interval)\n</code></pre>"},{"location":"combine/#add","title":"Add","text":"<pre><code>COMBINE (Name) Data_1 Data_2 ADD(time_interval)\n</code></pre>"},{"location":"combine/#subtract","title":"Subtract","text":"<pre><code>COMBINE (Name) Data_1 Data_2 SUBTRACT(time_interval)\n</code></pre>"},{"location":"combine/#merge","title":"Merge","text":"<pre><code>COMBINE (Name) Data_1 Data_2 MERGE(time_interval)\n</code></pre>"},{"location":"export/","title":"Export","text":"<p>The export is a very important tool as it lets you put the data into a format you are familiar with, Excel. The export step is simple to use and can output any type of data. Each name listed in the function call will be added to a seperate page in the Excel document.</p> <p>If you need to seperate different data into different excel files just call the Export function again and give it a different name. Note that the export step does not create any operational data, it only saves data to excel in the specified output folder.</p>"},{"location":"export/#syntax","title":"Syntax","text":"<p>The function can be called as follows:</p> <p><pre><code>EXPORT (File_Name) Data_1 Data_2 Data_3 ...\n</code></pre> </p> <p></p>"},{"location":"load/","title":"Load","text":"<p>The Load step is the most imporant of all the steps. It is responsible for retrieving data from the various data sources and making it available to any steps that follow. However, it is also one of the easiest steps to learn.</p> <p><pre><code>LOAD (Name) source device signal &lt;date from&gt; &lt;date to&gt;\n</code></pre> Example <pre><code>LOAD   (Eng_Speed)  s3  2A711C91 iwEngineSpeed  &lt;18/01/24,04:00:00&gt;  &lt;18/01/24,04:04:05&gt;\n</code></pre> <pre><code>                             t  iwEngineSpeed\n0   2024-01-18 04:00:00.062800         1982.0\n1   2024-01-18 04:00:00.322650         1982.0\n2   2024-01-18 04:00:00.582000         1983.0\n3   2024-01-18 04:00:00.842500         1981.0\n4   2024-01-18 04:00:01.102850         1980.0\n..                         ...            ...\n919 2024-01-18 04:03:58.701900          781.0\n920 2024-01-18 04:03:58.964000          864.0\n921 2024-01-18 04:03:59.221350         1110.0\n922 2024-01-18 04:03:59.484850         1292.0\n923 2024-01-18 04:03:59.740400         1495.0\n</code></pre></p>"},{"location":"operate/","title":"Operate","text":"<p>The operate step is the most powerful but also the hardest step to learn. It lets you take any data and perform a series of sequential OPERATEs on it. These OPERATEs are simple but when combined together can acheive complex behaviour.</p> <p>Most OPERATEs can be performed on single and multicolumn data but some OPERATEs only work on single column data. Some operate functions are also denoted as finishing this is because the data they output cannot be operated on and can only be used in steps such as Snapshot and Export.</p> <p>You are also not limited to how many operate steps you can perform. However, each operate step will need a new name otherwise the data will be overwritten.</p>"},{"location":"operate/#anatomy","title":"Anatomy","text":"<p>All operate steps follow the same syntax <pre><code>OPERATE (Name) Data_Name FUNC1(args) FUNC2(args) ... \n</code></pre></p>"},{"location":"operate/#function-types","title":"Function types","text":""},{"location":"operate/#chainable-c","title":"Chainable (C)","text":"<p>These are functions that produce operable data, this is data that can be used in another process</p>"},{"location":"operate/#non-chainable-n","title":"Non-Chainable (N)","text":"<p>These are functions that produce operable data, this is data that can be used in another process</p>"},{"location":"operate/#single-column-s","title":"Single Column (S)","text":"<p>These functions will only work if the data input has a single column, therefore these functions will not work with data from a TABLE OPERATE.</p>"},{"location":"operate/#flexible-f","title":"Flexible (F)","text":"<p>These functions work with both single and multicolumn data</p>"},{"location":"operate/#functions","title":"Functions","text":"<p>The functions execute sequentially from left to right, each has a name identifier and an argument input</p>"},{"location":"operate/#add-cs","title":"Add (C,S)","text":"<p>The add function adds any number to all values in a table</p> <p><pre><code>OPERATE (...) ... ADD(Value)\n</code></pre> <pre><code>ADD(10)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |      20\n2  |       5         2  |      15    \n</code></pre></p>"},{"location":"operate/#subtract-cs","title":"Subtract (C,S)","text":"<p>The subract function subtracts any number from values in a table</p> <p><pre><code>OPERATE (...) ... SUBTRACT(Value)\n</code></pre> <pre><code>SUBTRACT(10)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |       0\n2  |       5         2  |      -5    \n</code></pre></p>"},{"location":"operate/#multiply-cs","title":"Multiply (C,S)","text":"<p>The divide function divides all values in table</p> <p><pre><code>OPERATE (...) ... MULTIPLY(Value)\n</code></pre> <pre><code>MULTIPLY(10)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |     100\n2  |       5         2  |      50    \n</code></pre></p>"},{"location":"operate/#divide-cs","title":"Divide (C,S)","text":"<p>The divide function divides all values in table</p> <p><pre><code>OPERATE (...) ... DIVIDE(Value)\n</code></pre> <pre><code>DIVIDE(10)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |       1\n2  |       5         2  |     0.5    \n</code></pre></p>"},{"location":"operate/#rename-column-cs","title":"Rename Column (C,S)","text":"<p><pre><code>OPERATE (...) ... RENAME(Name)\n</code></pre> <pre><code>RENAME(New_Signal)\n</code></pre> <pre><code>t  |  Signal         t  |  New_Signal\n---|--------         ---|------------\n1  |      10   --&gt;   1  |          10\n2  |       5         2  |           5    \n</code></pre></p>"},{"location":"operate/#resample-cf","title":"Resample (C,F)","text":"<p>Resamples the data to meet a specified time frequency, has a variety of methods for resampling the data <pre><code>OPERATE (...) ... RESAMPLE(time,method)\n</code></pre> Resampling Methods</p>"},{"location":"operate/#max","title":"Max","text":"<p>Gets max value from each resampled window</p>"},{"location":"operate/#min","title":"Min","text":"<p>Gets min value from each resampled window</p>"},{"location":"operate/#mean","title":"Mean","text":"<p>Gets mean value from each resampled window</p>"},{"location":"operate/#sum","title":"Sum","text":"<p>Sums all values in resampling window</p>"},{"location":"operate/#remove-gaps-cf","title":"Remove Gaps (C,F)","text":"<p><pre><code>OPERATE (...) ... DROPGAP()\n</code></pre> <pre><code>DROPGAP()\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |      10\n2  |     NaN         3  |       5\n3  |       5           \n</code></pre> <pre><code>DROPGAP()\n</code></pre> <pre><code>t  |  one|  two         t  |  one|  two\n---|-----|-----         ---|-----|-----\n1  |   10|  NaN   --&gt;   3  |    5|    3\n2  |  NaN|    7         \n3  |    5|    3         \n</code></pre></p>"},{"location":"operate/#fill-gaps-cf","title":"Fill Gaps (C,F)","text":"<p>Fills gaps in data with a specified value <pre><code>OPERATE (...) ... FILLGAP(value)\n</code></pre></p>"},{"location":"operate/#forward-fill-gaps-cf","title":"Forward Fill Gaps (C,F)","text":"<p>Fills gaps with previously found data, will fill an unlimited amount of gaps after a data point. If specified can limit the fill reach <pre><code>OPERATE (...) ... FFILL(number?)\n</code></pre></p>"},{"location":"operate/#back-fill-gaps-cf","title":"Back Fill Gaps (C,F)","text":"<p>Fills gaps with values ahead if found, will fill an unlimited amount of gaps before a data point. If specified can limit the fill reach <pre><code>OPERATE (...) ... BFILL(number?)\n</code></pre></p>"},{"location":"operate/#interpolate-cf","title":"Interpolate (C,F)","text":"<p>Fills gaps using linear interpolation between existing data points and gaps <pre><code>OPERATE (...) ... INTERPOLATE(number?)\n</code></pre></p>"},{"location":"operate/#maximum-cf","title":"Maximum (C,F)","text":"<p>If no number specified, Number will default to 1</p> <p><pre><code>OPERATE (...) ... MAX(Number?)\n</code></pre> <pre><code>MAX(2)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   1  |      10\n2  |       3         3  |       5\n3  |       5         \n</code></pre> <pre><code>MAX(2)\n</code></pre> <pre><code>t  |  one|  two         t  |  one|  two\n---|-----|-----         ---|-----|-----\n1  |   10|    1   --&gt;   2  |   10|    4\n2  |   10|    4         1  |   10|    1\n3  |    5|    3         \n</code></pre></p>"},{"location":"operate/#minimum-cf","title":"Minimum (C,F)","text":"<p>If no number specified, Number will default to 1</p> <p><pre><code>OPERATE (...) ... MIN(Number?)\n</code></pre> <pre><code>MIN(2)\n</code></pre> <pre><code>t  |  Signal         t  |  Signal\n---|--------         ---|--------\n1  |      10   --&gt;   3  |       3\n2  |       5         2  |       5\n3  |       3         \n</code></pre> <pre><code>MIN(2)\n</code></pre> <pre><code>t  |  one|  two         t  |  one|  two\n---|-----|-----         ---|-----|-----\n1  |   10|    1   --&gt;   3  |    5|    3\n2  |   10|    4         1  |   10|    1\n3  |    5|    3         \n</code></pre></p>"},{"location":"operate/#sort-signal-cf","title":"Sort Signal (C,F)","text":"<p>Sorts the data in ascending order with the first column taking precedence, then the second, then ...</p> <p>If Sort is specified with a 1 in the arguments it will sort in descending order</p> <pre><code>OPERATE (...) ... SORT(1?)\n</code></pre>"},{"location":"operate/#sort-time-cf","title":"Sort Time (C,F)","text":"<p>Sorts time into ascending order</p> <pre><code>OPERATE (...) ... SORTTIME()\n</code></pre>"},{"location":"operate/#get-duplicates-cf","title":"Get duplicates (C,F)","text":"<p>Removes values that do not occur more than once <pre><code>OPERATE (...) ... GETDUPLICATES()\n</code></pre></p>"},{"location":"operate/#remove-duplicates-cf","title":"Remove duplicates (C,F)","text":"<p>removes values that occur more than once <pre><code>OPERATE (...) ... DROPDUPLICATES()\n</code></pre></p>"},{"location":"operate/#get-above-cf","title":"Get above (C,F)","text":"<p>removes values that are not above specified value <pre><code>OPERATE (...) ... ABOVE(value)\n</code></pre></p>"},{"location":"operate/#get-below-cf","title":"Get below (C,F)","text":"<p>removes values that are not below specified value <pre><code>OPERATE (...) ... BELOW(value)\n</code></pre></p>"},{"location":"operate/#mean-nf","title":"Mean (N,F)","text":"<p>Find the mean of each colunm and return this data <pre><code>OPERATE (...) ... MEAN()\n</code></pre></p>"},{"location":"operate/#median-nf","title":"Median (N,F)","text":"<p>Finds the median for each column and return this data <pre><code>OPERATE (...) ... MEDIAN()\n</code></pre></p>"},{"location":"operate/#count-nf","title":"Count (N,F)","text":"<p>Counts number of values in each column and returns this data <pre><code>OPERATE (...) ... COUNT()\n</code></pre></p>"},{"location":"plot/","title":"Plot","text":"<p>Plot is a simple step used to output different graphs. It is useful when you need a quick visualisation and dont want to plot the data yourself in Excel. Most plots will work out of the box with both single and multicoloum data.</p> <p>There are a few available plot types, all will work with any provided data but some plots are better suited to specific data formats.</p> <p>The Plots shown below are from a very small dataset, this step is still in testing.</p>"},{"location":"plot/#format","title":"Format","text":"<p>The Plot format can save to a variety of formats, these are selected with the last step argument</p> <p>PDF <pre><code>PLOT (...) ... (...) .pdf\n</code></pre> PNG <pre><code>PLOT (...) ... (...) .png\n</code></pre></p> <p>SVG <pre><code>PLOT (...) ... (...) .svg\n</code></pre></p>"},{"location":"plot/#line","title":"Line","text":"<pre><code>PLOT (Plot_Line) Plot_Data LINE(title,x,y) .png\n</code></pre>"},{"location":"plot/#bar","title":"Bar","text":"<pre><code>PLOT (Plot_Bar) Plot_Data BAR(title,x,y) .png\n</code></pre>"},{"location":"plot/#horizontal-bar","title":"Horizontal Bar","text":"<pre><code>PLOT (Plot_HBar) Plot_Data BARH(title,x,y) .png\n</code></pre>"},{"location":"plot/#area","title":"Area","text":"<pre><code>PLOT (Plot_Area) Plot_Data AREA(title,x,y) .png\n</code></pre>"},{"location":"plot/#histogram","title":"Histogram","text":"<p>Not currently available</p>"},{"location":"plot/#scatter","title":"Scatter","text":"<p>Not currently available</p>"},{"location":"snapshot/","title":"Snapshot","text":"<p>This is the simplest of the operations. It is an easy way to view a snippet of the data you are creating.</p>"},{"location":"snapshot/#syntax","title":"Syntax","text":"<p><pre><code>SNAPSHOT (Name) Data_Name\n</code></pre> For example</p> <p><pre><code>LOAD (Name) ... iwEngineSpeed ...\n\nSNAPSHOT (Snap_1) Name\n</code></pre> <pre><code>(In Output Terminal)\n\nSNAPSHOT (Eng_Speed) \n                             t  iwEngineSpeed\n0   2024-01-18 04:00:00.062800         1982.0\n1   2024-01-18 04:00:00.322650         1982.0\n2   2024-01-18 04:00:00.582000         1983.0\n3   2024-01-18 04:00:00.842500         1981.0\n4   2024-01-18 04:00:01.102850         1980.0\n..                         ...            ...\n919 2024-01-18 04:03:58.701900          781.0\n920 2024-01-18 04:03:58.964000          864.0\n921 2024-01-18 04:03:59.221350         1110.0\n922 2024-01-18 04:03:59.484850         1292.0\n923 2024-01-18 04:03:59.740400         1495.0\n\n[924 rows x 2 columns]\n</code></pre></p>"},{"location":"table/","title":"Table","text":"<p>The table step combines multiple single column data into one table. This table can then be used in other steps to acheive results that are not possible with single column data.</p>"},{"location":"table/#syntax","title":"Syntax","text":"<p><pre><code>TABLE (Name) Data_1 Data_2 Data_3\n</code></pre> <pre><code> t  |  D_1_Col|  D_2_Col|  D_2_Col\n ---|---------|---------|---------\n 1  |       12|       14|        7\n 2  |       13|       19|       15  \n 3  |       11|       18|        9  \n</code></pre></p>"}]}